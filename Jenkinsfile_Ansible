pipeline {
    agent {
        node {
            customWorkspace '/var/jenkins_home/CI-CD-demo02'
            label 'master'
        }
    }
    parameters {
        string (name: 'KUBE_CONFIG_ID', defaultValue: 'kubeconfig', description: 'Select the preconfigured Kubernetes credentials (Jenkins -> Credentials)')
        booleanParam (name: 'REBUILD', defaultValue: false, description: 'Should image be rebuilt?')
        string (name: 'DOCKERHUB_ID', defaultValue: 'gkor75', description: 'your Docker Hub ID?')
        string (name: 'DOCKERHUB_CREDENTIALS', defaultValue: 'docker_hub_login', description: 'your Docker Hub credentials?')
        string (name: 'VS_IP_addr', defaultValue: '10.17.12.14', description: 'IP address exposed on F5')
    }
    environment {
        IPaddr = "${params.VS_IP_addr}"
        AppName = 'dvwa'
        Namespace = 'ingress-ansible'
    }
    stages {
        stage('Compilation') {
            steps {echo 'code compilation steps goes here'}
        }
        stage('Building docker immage') {
            when {
                expression { return params.REBUILD }
            }
            steps {
                echo 'Docker Image building'
                dir ("docker-vulnerable-dvwa") {
                    milestone(2)
                   // script {
                   //     def my_image = docker.build("${params.DOCKERHUB_ID}/${env.AppName}:1.0")
                   //     docker.withRegistry('https://registry.hub.docker.com', "$params.DOCKERHUB_CREDENTIALS") {
                   //     my_image.push("1.0")
                   //     my_image.push("latest")
                   //     }
                   // }
                }

            }
        }
        stage('Testing') {
            steps {echo 'Testing related steps goes here'}
        }
        stage('Kubernetes Deployment') {
            steps {
                input 'Deploy to Production Kubernetes Cluster?'
                milestone(1)
                kubernetesDeploy(
                    kubeconfigId: "${params.KUBE_CONFIG_ID}",
                    configs: 'port_80_app.yaml',
                    enableConfigSubstitution: true
                    )
            }
        }
        stage('Setting up a BigIP pool') {
            steps {
                milestone(2)
                kubernetesDeploy(
                    kubeconfigId: "${params.KUBE_CONFIG_ID}",
                    configs: 'ConfigMaps/ConfigMap_no_VS.yaml',
                    enableConfigSubstitution: true
                )
            }
        }
        stage('Setting up advanced BigIP configuration via Ansible') {
            steps {
                input 'Push advanced BigIP configuration?'
                milestone(3)
                dir ("ansible") {
                ansiColor('xterm') {
                    ansiblePlaybook (
                        playbook: "LAMP_negative_sec.yaml",
                        inventory: "inventory/hosts.yaml",
                        extraVars: [
                            state: "present",
                            VS_IP_addr: "${params.VS_IP_addr}",
                            Kube_App_name: "${env.AppName}",
                            Namespace: "${Namespace}"
                        ],
                        colorized: true
                    )
                }
                }
            }
        }
    }
}
