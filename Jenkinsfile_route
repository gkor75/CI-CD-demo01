pipeline {
    agent {
        node {
            customWorkspace '/var/jenkins_home/CI-CD-demo02'
            label 'master'
        }
    }
    parameters {
        booleanParam (name: 'REBUILD', defaultValue: false, description: 'Should image be rebuilt?')
        string (name: 'DOCKERHUB_ID', defaultValue: 'gkor75', description: 'your Docker Hub ID?')
        string (name: 'DOCKERHUB_CREDENTIALS', defaultValue: 'docker_hub_login', description: 'you Docker Hub credentials?')
        string (name: 'KUBE_CONFIG_ID', defaultValue: 'kubeconfig', description: 'Select the preconfigured Kubernetes credentials (Jenkins -> Credentials)')
        string (name: 'OS_TOKEN', defaultValue: 'ROUTE_DEMO_TOKEN', description: 'OpenShift Token for creating routes')
    }
    environment {
        OS_TOKEN = credentials('ROUTE_DEMO_TOKEN')
    }
    stages {
        stage('Compilation') {
            steps {echo 'code compilation steps goes here'}
        }
        stage('Building docker immage') {
            when {
                expression { return params.REBUILD }
            }
            steps {
                echo 'Docker Image building'
                dir ("docker-vulnerable-dvwa") {
                    milestone(2)
                //    script {
                //        def my_image = docker.build("${params.DOCKERHUB_ID}/dvwa:1.0")
                //        docker.withRegistry('https://registry.hub.docker.com', "$params.DOCKERHUB_CREDENTIALS") {
                //        my_image.push("1.0")
                //        my_image.push("latest")
                //        }
                //    }
                }
            }
            
        }
        stage('Kubernetes Deployment') {
            steps {
//                input 'Deploy to Production Kubernetes Cluster?'
                milestone(3)
                kubernetesDeploy(
                    kubeconfigId: "${params.KUBE_CONFIG_ID}",
                    configs: 'route_app.yaml',
                    enableConfigSubstitution: true
                )
            }
        }
        stage('Exposing services via https') {
            steps {
//                input "Expose services via https?"
                milestone(4)
                openshiftCreateResource (namespace: 'route-demo', 
                    jsonyaml: readFile ('route_tls_term1.yaml'),
                    apiURL: 'https://master1.f5demo.com:443',
                    authToken: "${OS_TOKEN}",
                    verbose: 'true'
                    )
                openshiftCreateResource (namespace: 'route-demo', 
                    jsonyaml: readFile ('route_tls_term2.yaml'),
                    apiURL: 'https://master1.f5demo.com:443',
                    authToken: "${OS_TOKEN}",
                    verbose: 'true'
                    )
            }
        }
    }
}
